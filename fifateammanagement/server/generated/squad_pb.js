// source: squad.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.AddPlayerRequest', null, global);
goog.exportSymbol('proto.SquadBaseRequest', null, global);
goog.exportSymbol('proto.SquadBaseResponse', null, global);
goog.exportSymbol('proto.SquadPlayer', null, global);
goog.exportSymbol('proto.SquadPlayerList', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AddPlayerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AddPlayerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AddPlayerRequest.displayName = 'proto.AddPlayerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SquadBaseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SquadBaseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SquadBaseRequest.displayName = 'proto.SquadBaseRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SquadBaseResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SquadBaseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SquadBaseResponse.displayName = 'proto.SquadBaseResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SquadPlayerList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SquadPlayerList.repeatedFields_, null);
};
goog.inherits(proto.SquadPlayerList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SquadPlayerList.displayName = 'proto.SquadPlayerList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SquadPlayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SquadPlayer.repeatedFields_, null);
};
goog.inherits(proto.SquadPlayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SquadPlayer.displayName = 'proto.SquadPlayer';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AddPlayerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.AddPlayerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AddPlayerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddPlayerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetteam: jspb.Message.getFieldWithDefault(msg, 1, ""),
    player: (f = msg.getPlayer()) && proto.SquadPlayer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AddPlayerRequest}
 */
proto.AddPlayerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AddPlayerRequest;
  return proto.AddPlayerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AddPlayerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AddPlayerRequest}
 */
proto.AddPlayerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetteam(value);
      break;
    case 2:
      var value = new proto.SquadPlayer;
      reader.readMessage(value,proto.SquadPlayer.deserializeBinaryFromReader);
      msg.setPlayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AddPlayerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AddPlayerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AddPlayerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AddPlayerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetteam();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.SquadPlayer.serializeBinaryToWriter
    );
  }
};


/**
 * optional string targetTeam = 1;
 * @return {string}
 */
proto.AddPlayerRequest.prototype.getTargetteam = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AddPlayerRequest} returns this
 */
proto.AddPlayerRequest.prototype.setTargetteam = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SquadPlayer player = 2;
 * @return {?proto.SquadPlayer}
 */
proto.AddPlayerRequest.prototype.getPlayer = function() {
  return /** @type{?proto.SquadPlayer} */ (
    jspb.Message.getWrapperField(this, proto.SquadPlayer, 2));
};


/**
 * @param {?proto.SquadPlayer|undefined} value
 * @return {!proto.AddPlayerRequest} returns this
*/
proto.AddPlayerRequest.prototype.setPlayer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AddPlayerRequest} returns this
 */
proto.AddPlayerRequest.prototype.clearPlayer = function() {
  return this.setPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AddPlayerRequest.prototype.hasPlayer = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SquadBaseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SquadBaseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SquadBaseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SquadBaseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetteam: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SquadBaseRequest}
 */
proto.SquadBaseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SquadBaseRequest;
  return proto.SquadBaseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SquadBaseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SquadBaseRequest}
 */
proto.SquadBaseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetteam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SquadBaseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SquadBaseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SquadBaseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SquadBaseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetteam();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string targetTeam = 1;
 * @return {string}
 */
proto.SquadBaseRequest.prototype.getTargetteam = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.SquadBaseRequest} returns this
 */
proto.SquadBaseRequest.prototype.setTargetteam = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SquadBaseResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SquadBaseResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SquadBaseResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SquadBaseResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    succes: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    errormessage: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SquadBaseResponse}
 */
proto.SquadBaseResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SquadBaseResponse;
  return proto.SquadBaseResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SquadBaseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SquadBaseResponse}
 */
proto.SquadBaseResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSucces(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrormessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SquadBaseResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SquadBaseResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SquadBaseResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SquadBaseResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSucces();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrormessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool succes = 1;
 * @return {boolean}
 */
proto.SquadBaseResponse.prototype.getSucces = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SquadBaseResponse} returns this
 */
proto.SquadBaseResponse.prototype.setSucces = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string errorMessage = 2;
 * @return {string}
 */
proto.SquadBaseResponse.prototype.getErrormessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.SquadBaseResponse} returns this
 */
proto.SquadBaseResponse.prototype.setErrormessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SquadPlayerList.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SquadPlayerList.prototype.toObject = function(opt_includeInstance) {
  return proto.SquadPlayerList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SquadPlayerList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SquadPlayerList.toObject = function(includeInstance, msg) {
  var f, obj = {
    succes: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    errormessage: jspb.Message.getFieldWithDefault(msg, 2, ""),
    squadsList: jspb.Message.toObjectList(msg.getSquadsList(),
    proto.SquadPlayer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SquadPlayerList}
 */
proto.SquadPlayerList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SquadPlayerList;
  return proto.SquadPlayerList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SquadPlayerList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SquadPlayerList}
 */
proto.SquadPlayerList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSucces(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrormessage(value);
      break;
    case 3:
      var value = new proto.SquadPlayer;
      reader.readMessage(value,proto.SquadPlayer.deserializeBinaryFromReader);
      msg.addSquads(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SquadPlayerList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SquadPlayerList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SquadPlayerList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SquadPlayerList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSucces();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrormessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSquadsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.SquadPlayer.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool succes = 1;
 * @return {boolean}
 */
proto.SquadPlayerList.prototype.getSucces = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SquadPlayerList} returns this
 */
proto.SquadPlayerList.prototype.setSucces = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string errorMessage = 2;
 * @return {string}
 */
proto.SquadPlayerList.prototype.getErrormessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.SquadPlayerList} returns this
 */
proto.SquadPlayerList.prototype.setErrormessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated SquadPlayer squads = 3;
 * @return {!Array<!proto.SquadPlayer>}
 */
proto.SquadPlayerList.prototype.getSquadsList = function() {
  return /** @type{!Array<!proto.SquadPlayer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SquadPlayer, 3));
};


/**
 * @param {!Array<!proto.SquadPlayer>} value
 * @return {!proto.SquadPlayerList} returns this
*/
proto.SquadPlayerList.prototype.setSquadsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.SquadPlayer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SquadPlayer}
 */
proto.SquadPlayerList.prototype.addSquads = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.SquadPlayer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SquadPlayerList} returns this
 */
proto.SquadPlayerList.prototype.clearSquadsList = function() {
  return this.setSquadsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SquadPlayer.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SquadPlayer.prototype.toObject = function(opt_includeInstance) {
  return proto.SquadPlayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SquadPlayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SquadPlayer.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    baseoverall: jspb.Message.getFieldWithDefault(msg, 3, 0),
    currentoverall: jspb.Message.getFieldWithDefault(msg, 4, 0),
    potentiel: jspb.Message.getFieldWithDefault(msg, 5, 0),
    positionList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    country: jspb.Message.getFieldWithDefault(msg, 7, ""),
    contracttype: jspb.Message.getFieldWithDefault(msg, 8, ""),
    age: jspb.Message.getFieldWithDefault(msg, 9, 0),
    value: jspb.Message.getFieldWithDefault(msg, 10, 0),
    wages: jspb.Message.getFieldWithDefault(msg, 11, 0),
    atkworkrate: jspb.Message.getFieldWithDefault(msg, 12, ""),
    defworkrate: jspb.Message.getFieldWithDefault(msg, 13, ""),
    weakfoot: jspb.Message.getFieldWithDefault(msg, 14, 0),
    technique: jspb.Message.getFieldWithDefault(msg, 15, 0),
    minpotential: jspb.Message.getFieldWithDefault(msg, 16, 0),
    maxpotential: jspb.Message.getFieldWithDefault(msg, 17, 0),
    status: jspb.Message.getFieldWithDefault(msg, 18, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SquadPlayer}
 */
proto.SquadPlayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SquadPlayer;
  return proto.SquadPlayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SquadPlayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SquadPlayer}
 */
proto.SquadPlayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBaseoverall(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentoverall(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPotentiel(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addPosition(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setContracttype(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAge(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWages(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setAtkworkrate(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefworkrate(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWeakfoot(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTechnique(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinpotential(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxpotential(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SquadPlayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SquadPlayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SquadPlayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SquadPlayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBaseoverall();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getCurrentoverall();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getPotentiel();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getPositionList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getContracttype();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getAge();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getWages();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getAtkworkrate();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getDefworkrate();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getWeakfoot();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getTechnique();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getMinpotential();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getMaxpotential();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.SquadPlayer.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.SquadPlayer} returns this
 */
proto.SquadPlayer.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.SquadPlayer.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.SquadPlayer} returns this
 */
proto.SquadPlayer.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 baseOverall = 3;
 * @return {number}
 */
proto.SquadPlayer.prototype.getBaseoverall = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.SquadPlayer} returns this
 */
proto.SquadPlayer.prototype.setBaseoverall = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 currentOverall = 4;
 * @return {number}
 */
proto.SquadPlayer.prototype.getCurrentoverall = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.SquadPlayer} returns this
 */
proto.SquadPlayer.prototype.setCurrentoverall = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 potentiel = 5;
 * @return {number}
 */
proto.SquadPlayer.prototype.getPotentiel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.SquadPlayer} returns this
 */
proto.SquadPlayer.prototype.setPotentiel = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated string position = 6;
 * @return {!Array<string>}
 */
proto.SquadPlayer.prototype.getPositionList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.SquadPlayer} returns this
 */
proto.SquadPlayer.prototype.setPositionList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.SquadPlayer} returns this
 */
proto.SquadPlayer.prototype.addPosition = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SquadPlayer} returns this
 */
proto.SquadPlayer.prototype.clearPositionList = function() {
  return this.setPositionList([]);
};


/**
 * optional string country = 7;
 * @return {string}
 */
proto.SquadPlayer.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.SquadPlayer} returns this
 */
proto.SquadPlayer.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string contractType = 8;
 * @return {string}
 */
proto.SquadPlayer.prototype.getContracttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.SquadPlayer} returns this
 */
proto.SquadPlayer.prototype.setContracttype = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int32 age = 9;
 * @return {number}
 */
proto.SquadPlayer.prototype.getAge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.SquadPlayer} returns this
 */
proto.SquadPlayer.prototype.setAge = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 value = 10;
 * @return {number}
 */
proto.SquadPlayer.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.SquadPlayer} returns this
 */
proto.SquadPlayer.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 wages = 11;
 * @return {number}
 */
proto.SquadPlayer.prototype.getWages = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.SquadPlayer} returns this
 */
proto.SquadPlayer.prototype.setWages = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional string atkWorkRate = 12;
 * @return {string}
 */
proto.SquadPlayer.prototype.getAtkworkrate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.SquadPlayer} returns this
 */
proto.SquadPlayer.prototype.setAtkworkrate = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string defWorkRate = 13;
 * @return {string}
 */
proto.SquadPlayer.prototype.getDefworkrate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.SquadPlayer} returns this
 */
proto.SquadPlayer.prototype.setDefworkrate = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional int32 weakFoot = 14;
 * @return {number}
 */
proto.SquadPlayer.prototype.getWeakfoot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.SquadPlayer} returns this
 */
proto.SquadPlayer.prototype.setWeakfoot = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 technique = 15;
 * @return {number}
 */
proto.SquadPlayer.prototype.getTechnique = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.SquadPlayer} returns this
 */
proto.SquadPlayer.prototype.setTechnique = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 minPotential = 16;
 * @return {number}
 */
proto.SquadPlayer.prototype.getMinpotential = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.SquadPlayer} returns this
 */
proto.SquadPlayer.prototype.setMinpotential = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int32 maxPotential = 17;
 * @return {number}
 */
proto.SquadPlayer.prototype.getMaxpotential = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.SquadPlayer} returns this
 */
proto.SquadPlayer.prototype.setMaxpotential = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional string status = 18;
 * @return {string}
 */
proto.SquadPlayer.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.SquadPlayer} returns this
 */
proto.SquadPlayer.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


goog.object.extend(exports, proto);
